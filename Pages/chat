
import React, { useState, useEffect, useRef, useCallback } from "react";
import { Conversation } from "@/entities/Conversation";
import { User } from "@/entities/User";
import { InvokeLLM } from "@/integrations/Core";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Heart, Send, Bot, User as UserIcon, Globe, Loader2 } from "lucide-react";
import { format } from "date-fns";

import ChatMessage from "../components/chat/ChatMessage";
import QuickTopics from "../components/chat/QuickTopics";
import LanguageSelector from "../components/chat/LanguageSelector";

export default function ChatPage() {
  const [messages, setMessages] = useState([]);
  const [inputMessage, setInputMessage] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [currentLanguage, setCurrentLanguage] = useState("english");
  const [sessionId] = useState(() => `session_${Date.now()}`);
  const [user, setUser] = useState(null);
  const messagesEndRef = useRef(null);

  const addWelcomeMessage = useCallback(() => {
    const welcomeMessage = {
      type: 'bot',
      content: "नमस्ते! 🙏 I'm your health assistant. I can help you with healthcare information in multiple languages. How can I help you today?",
      timestamp: new Date(),
      language: currentLanguage
    };
    setMessages([welcomeMessage]);
  }, [currentLanguage]);

  useEffect(() => {
    loadUserData();
    addWelcomeMessage();
  }, [addWelcomeMessage]); // Add addWelcomeMessage to dependency array

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const loadUserData = async () => {
    try {
      const currentUser = await User.me();
      setUser(currentUser);
      if (currentUser.preferred_language) {
        setCurrentLanguage(currentUser.preferred_language);
      }
    } catch (error) {
      console.log("User not authenticated, using default settings");
    }
  };

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  const getHealthcarePrompt = (userMessage, language) => {
    const languageMap = {
      english: "English",
      hindi: "Hindi (हिंदी)",
      bengali: "Bengali (বাংলা)",
      telugu: "Telugu (తెలుగు)",
      marathi: "Marathi (मराठी)",
      tamil: "Tamil (தமிழ்)",
      gujarati: "Gujarati (ગુજરાતી)",
      kannada: "Kannada (ಕನ್ನಡ)",
      malayalam: "Malayalam (മലയാളം)",
      punjabi: "Punjabi (ਪੰਜਾਬੀ)"
    };

    return `You are a compassionate healthcare education assistant for rural and semi-urban populations. 

User's message: "${userMessage}"
Respond in: ${languageMap[language]}

Guidelines:
- Provide accurate, culturally sensitive healthcare information
- Use simple, easy-to-understand language suitable for low-literacy users
- Focus on preventive care, basic symptoms, vaccination schedules, and general wellness
- Include culturally appropriate examples and references
- Be empathetic and supportive
- If discussing serious symptoms, always recommend consulting a healthcare professional
- For emergency situations, emphasize calling local emergency services (108 in India)
- Avoid giving specific medical diagnoses or prescriptions
- Include basic health tips when relevant
- Keep responses concise but informative (2-3 paragraphs max)

Remember: You're an educational tool, not a replacement for professional medical care.`;
  };

  const handleSendMessage = async () => {
    if (!inputMessage.trim() || isLoading) return;

    const userMessage = {
      type: 'user',
      content: inputMessage.trim(),
      timestamp: new Date(),
      language: currentLanguage
    };

    setMessages(prev => [...prev, userMessage]);
    setInputMessage("");
    setIsLoading(true);

    try {
      const response = await InvokeLLM({
        prompt: getHealthcarePrompt(inputMessage.trim(), currentLanguage)
      });

      const botMessage = {
        type: 'bot',
        content: response,
        timestamp: new Date(),
        language: currentLanguage
      };

      setMessages(prev => [...prev, botMessage]);

      // Save conversation to database
      await Conversation.create({
        user_message: inputMessage.trim(),
        bot_response: response,
        language: currentLanguage,
        session_id: sessionId,
        topic_category: "general"
      });

      // Update user stats
      if (user) {
        await User.updateMyUserData({
          total_conversations: (user.total_conversations || 0) + 1,
          last_active: new Date().toISOString()
        });
      }

    } catch (error) {
      const errorMessage = {
        type: 'bot',
        content: "I'm sorry, I'm having trouble responding right now. Please try again in a moment.",
        timestamp: new Date(),
        language: currentLanguage,
        isError: true
      };
      setMessages(prev => [...prev, errorMessage]);
    }

    setIsLoading(false);
  };

  const handleQuickTopic = (topic) => {
    setInputMessage(topic);
  };

  const handleLanguageChange = async (language) => {
    setCurrentLanguage(language);
    if (user) {
      await User.updateMyUserData({ preferred_language: language });
    }
  };

  const handleKeyPress = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  return (
    <div className="h-screen flex flex-col bg-gradient-to-br from-slate-50 via-blue-50 to-green-50">
      {/* Header */}
      <div className="bg-white/90 backdrop-blur-sm border-b border-slate-200/60 p-4 shadow-sm">
        <div className="max-w-4xl mx-auto flex justify-between items-center">
          <div className="flex items-center gap-3">
            <div className="w-10 h-10 bg-gradient-to-br from-blue-500 to-green-500 rounded-xl flex items-center justify-center shadow-lg">
              <Heart className="w-5 h-5 text-white" />
            </div>
            <div>
              <h1 className="text-xl font-bold text-slate-900">Health Assistant</h1>
              <p className="text-sm text-slate-600">Ask me anything about health and wellness</p>
            </div>
          </div>
          <LanguageSelector 
            currentLanguage={currentLanguage}
            onLanguageChange={handleLanguageChange}
          />
        </div>
      </div>

      {/* Chat Container */}
      <div className="flex-1 flex flex-col max-w-4xl mx-auto w-full p-4">
        {/* Messages Area */}
        <div className="flex-1 overflow-y-auto mb-4 space-y-4">
          {messages.map((message, index) => (
            <ChatMessage key={index} message={message} />
          ))}
          {isLoading && (
            <div className="flex justify-start">
              <div className="flex items-center gap-2 bg-white rounded-2xl px-4 py-3 shadow-sm border border-slate-200/60">
                <Bot className="w-5 h-5 text-blue-600" />
                <Loader2 className="w-4 h-4 animate-spin text-blue-600" />
                <span className="text-slate-600">Thinking...</span>
              </div>
            </div>
          )}
          <div ref={messagesEndRef} />
        </div>

        {/* Quick Topics */}
        {messages.length <= 1 && (
          <QuickTopics onTopicSelect={handleQuickTopic} language={currentLanguage} />
        )}

        {/* Input Area */}
        <div className="bg-white/90 backdrop-blur-sm rounded-2xl shadow-lg border border-slate-200/60 p-4">
          <div className="flex gap-3 items-end">
            <Input
              value={inputMessage}
              onChange={(e) => setInputMessage(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder="Type your health question here..."
              className="flex-1 bg-transparent border-none focus:ring-0 text-base placeholder:text-slate-400"
              disabled={isLoading}
            />
            <Button
              onClick={handleSendMessage}
              disabled={!inputMessage.trim() || isLoading}
              className="bg-gradient-to-r from-blue-600 to-green-600 hover:from-blue-700 hover:to-green-700 text-white rounded-xl px-6 py-3 transition-all duration-200 shadow-lg"
            >
              <Send className="w-5 h-5" />
            </Button>
          </div>
        </div>
      </div>
    </div>
  );
}
