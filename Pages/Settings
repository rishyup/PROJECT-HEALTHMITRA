import React, { useState, useEffect } from "react";
import { User } from "@/entities/User";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Checkbox } from "@/components/ui/checkbox";
import { Badge } from "@/components/ui/badge";
import { 
  Settings as SettingsIcon, 
  Globe, 
  MapPin, 
  User as UserIcon, 
  Heart,
  Save,
  CheckCircle
} from "lucide-react";
import { Alert, AlertDescription } from "@/components/ui/alert";

const languages = [
  { code: "english", name: "English", native: "English" },
  { code: "hindi", name: "Hindi", native: "हिंदी" },
  { code: "bengali", name: "Bengali", native: "বাংলা" },
  { code: "telugu", name: "Telugu", native: "తెలుగు" },
  { code: "marathi", name: "Marathi", native: "मराठी" },
  { code: "tamil", name: "Tamil", native: "தமிழ்" },
  { code: "gujarati", name: "Gujarati", native: "ગુજરાતી" },
  { code: "kannada", name: "Kannada", native: "ಕನ್ನಡ" },
  { code: "malayalam", name: "Malayalam", native: "മലയാളം" },
  { code: "punjabi", name: "Punjabi", native: "ਪੰਜਾਬੀ" }
];

const healthTopics = [
  { id: "preventive_care", name: "Preventive Care" },
  { id: "symptoms", name: "Symptoms & Diagnosis" },
  { id: "vaccination", name: "Vaccination" },
  { id: "maternal_health", name: "Maternal Health" },
  { id: "child_health", name: "Child Health" },
  { id: "nutrition", name: "Nutrition" },
  { id: "mental_health", name: "Mental Health" },
  { id: "emergency", name: "Emergency Care" }
];

const ageGroups = [
  { id: "under_18", name: "Under 18" },
  { id: "18_30", name: "18-30 years" },
  { id: "31_45", name: "31-45 years" },
  { id: "46_60", name: "46-60 years" },
  { id: "over_60", name: "Over 60" }
];

export default function SettingsPage() {
  const [user, setUser] = useState(null);
  const [userData, setUserData] = useState({
    preferred_language: "english",
    location: "",
    age_group: "",
    health_interests: []
  });
  const [isSaving, setIsSaving] = useState(false);
  const [showSuccess, setShowSuccess] = useState(false);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    loadUserData();
  }, []);

  const loadUserData = async () => {
    setIsLoading(true);
    try {
      const currentUser = await User.me();
      setUser(currentUser);
      setUserData({
        preferred_language: currentUser.preferred_language || "english",
        location: currentUser.location || "",
        age_group: currentUser.age_group || "",
        health_interests: currentUser.health_interests || []
      });
    } catch (error) {
      console.log("User not authenticated");
    }
    setIsLoading(false);
  };

  const handleSave = async () => {
    setIsSaving(true);
    try {
      await User.updateMyUserData(userData);
      setShowSuccess(true);
      setTimeout(() => setShowSuccess(false), 3000);
    } catch (error) {
      console.error("Error saving user data:", error);
    }
    setIsSaving(false);
  };

  const handleHealthInterestChange = (topicId, checked) => {
    if (checked) {
      setUserData(prev => ({
        ...prev,
        health_interests: [...prev.health_interests, topicId]
      }));
    } else {
      setUserData(prev => ({
        ...prev,
        health_interests: prev.health_interests.filter(id => id !== topicId)
      }));
    }
  };

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-green-50 p-6">
        <div className="max-w-2xl mx-auto">
          <div className="space-y-6">
            {Array(4).fill(0).map((_, index) => (
              <Card key={index} className="animate-pulse">
                <CardHeader>
                  <div className="h-6 bg-slate-200 rounded w-1/3"></div>
                </CardHeader>
                <CardContent>
                  <div className="space-y-3">
                    <div className="h-4 bg-slate-200 rounded"></div>
                    <div className="h-4 bg-slate-200 rounded w-2/3"></div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-green-50 p-6">
      <div className="max-w-2xl mx-auto">
        {/* Header */}
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-slate-900 mb-2 flex items-center gap-3">
            <SettingsIcon className="w-8 h-8 text-blue-600" />
            Settings
          </h1>
          <p className="text-slate-600">Customize your health assistant experience</p>
        </div>

        {showSuccess && (
          <Alert className="mb-6 bg-green-50 border-green-200 text-green-800">
            <CheckCircle className="h-4 w-4" />
            <AlertDescription>Settings saved successfully!</AlertDescription>
          </Alert>
        )}

        <div className="space-y-6">
          {/* Profile Information */}
          <Card className="bg-white/80 backdrop-blur-sm border-slate-200/60 shadow-sm">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <UserIcon className="w-5 h-5 text-blue-600" />
                Profile Information
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <Label htmlFor="full_name">Full Name</Label>
                <Input
                  id="full_name"
                  value={user?.full_name || ""}
                  disabled
                  className="bg-slate-50 text-slate-500"
                />
                <p className="text-xs text-slate-500 mt-1">Name cannot be changed</p>
              </div>
              <div>
                <Label htmlFor="email">Email</Label>
                <Input
                  id="email"
                  value={user?.email || ""}
                  disabled
                  className="bg-slate-50 text-slate-500"
                />
                <p className="text-xs text-slate-500 mt-1">Email cannot be changed</p>
              </div>
            </CardContent>
          </Card>

          {/* Language Preferences */}
          <Card className="bg-white/80 backdrop-blur-sm border-slate-200/60 shadow-sm">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Globe className="w-5 h-5 text-blue-600" />
                Language Preferences
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div>
                <Label htmlFor="preferred_language">Preferred Language</Label>
                <Select 
                  value={userData.preferred_language} 
                  onValueChange={(value) => setUserData(prev => ({...prev, preferred_language: value}))}
                >
                  <SelectTrigger className="bg-white border-slate-200">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    {languages.map((lang) => (
                      <SelectItem key={lang.code} value={lang.code}>
                        <span className="flex items-center gap-2">
                          <span>{lang.native}</span>
                          <span className="text-slate-500 text-sm">({lang.name})</span>
                        </span>
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
            </CardContent>
          </Card>

          {/* Personal Information */}
          <Card className="bg-white/80 backdrop-blur-sm border-slate-200/60 shadow-sm">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <MapPin className="w-5 h-5 text-blue-600" />
                Personal Information
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <Label htmlFor="location">Location (Optional)</Label>
                <Input
                  id="location"
                  value={userData.location}
                  onChange={(e) => setUserData(prev => ({...prev, location: e.target.value}))}
                  placeholder="e.g., Mumbai, Maharashtra"
                  className="bg-white border-slate-200"
                />
                <p className="text-xs text-slate-500 mt-1">Helps provide location-specific health advice</p>
              </div>
              <div>
                <Label htmlFor="age_group">Age Group</Label>
                <Select 
                  value={userData.age_group} 
                  onValueChange={(value) => setUserData(prev => ({...prev, age_group: value}))}
                >
                  <SelectTrigger className="bg-white border-slate-200">
                    <SelectValue placeholder="Select your age group" />
                  </SelectTrigger>
                  <SelectContent>
                    {ageGroups.map((group) => (
                      <SelectItem key={group.id} value={group.id}>
                        {group.name}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
            </CardContent>
          </Card>

          {/* Health Interests */}
          <Card className="bg-white/80 backdrop-blur-sm border-slate-200/60 shadow-sm">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Heart className="w-5 h-5 text-blue-600" />
                Health Interests
              </CardTitle>
              <p className="text-sm text-slate-600">Select topics you're most interested in learning about</p>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {healthTopics.map((topic) => (
                  <div key={topic.id} className="flex items-center space-x-3">
                    <Checkbox
                      id={topic.id}
                      checked={userData.health_interests.includes(topic.id)}
                      onCheckedChange={(checked) => handleHealthInterestChange(topic.id, checked)}
                    />
                    <Label
                      htmlFor={topic.id}
                      className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
                    >
                      {topic.name}
                    </Label>
                  </div>
                ))}
              </div>
              {userData.health_interests.length > 0 && (
                <div className="mt-4 flex flex-wrap gap-2">
                  {userData.health_interests.map((topicId) => {
                    const topic = healthTopics.find(t => t.id === topicId);
                    return (
                      <Badge key={topicId} variant="secondary" className="bg-blue-50 text-blue-700 border-blue-200">
                        {topic?.name}
                      </Badge>
                    );
                  })}
                </div>
              )}
            </CardContent>
          </Card>

          {/* Save Button */}
          <Card className="bg-white/80 backdrop-blur-sm border-slate-200/60 shadow-sm">
            <CardContent className="pt-6">
              <Button
                onClick={handleSave}
                disabled={isSaving}
                className="w-full bg-gradient-to-r from-blue-600 to-green-600 hover:from-blue-700 hover:to-green-700 text-white shadow-lg"
              >
                {isSaving ? (
                  <div className="flex items-center gap-2">
                    <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin" />
                    Saving...
                  </div>
                ) : (
                  <div className="flex items-center gap-2">
                    <Save className="w-4 h-4" />
                    Save Settings
                  </div>
                )}
              </Button>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
}