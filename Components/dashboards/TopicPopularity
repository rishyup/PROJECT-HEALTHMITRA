import React from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { TrendingUp } from "lucide-react";
import { Skeleton } from "@/components/ui/skeleton";

export default function TopicPopularity({ conversations, isLoading }) {
  if (isLoading) {
    return (
      <Card className="bg-white/80 backdrop-blur-sm border-slate-200/60 shadow-sm">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <TrendingUp className="w-5 h-5 text-green-600" />
            Popular Topics
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {Array(5).fill(0).map((_, index) => (
              <div key={index} className="flex items-center justify-between">
                <Skeleton className="h-4 w-32" />
                <Skeleton className="h-4 w-10" />
              </div>
            ))}
          </div>
        </CardContent>
      </Card>
    );
  }

  const topicData = conversations
    .filter(conv => conv.topic_category)
    .reduce((acc, conv) => {
      acc[conv.topic_category] = (acc[conv.topic_category] || 0) + 1;
      return acc;
    }, {});

  const sortedTopics = Object.entries(topicData)
    .sort(([,a], [,b]) => b - a)
    .slice(0, 6);

  const total = Object.values(topicData).reduce((sum, count) => sum + count, 0);

  const getCategoryColor = (category) => {
    const colors = {
      preventive_care: "bg-blue-100 text-blue-800 border-blue-200",
      symptoms: "bg-red-100 text-red-800 border-red-200",
      vaccination: "bg-green-100 text-green-800 border-green-200",
      maternal_health: "bg-pink-100 text-pink-800 border-pink-200",
      child_health: "bg-yellow-100 text-yellow-800 border-yellow-200",
      nutrition: "bg-orange-100 text-orange-800 border-orange-200",
      mental_health: "bg-purple-100 text-purple-800 border-purple-200",
      emergency: "bg-red-100 text-red-800 border-red-200",
      general: "bg-gray-100 text-gray-800 border-gray-200"
    };
    return colors[category] || colors.general;
  };

  return (
    <Card className="bg-white/80 backdrop-blur-sm border-slate-200/60 shadow-sm">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <TrendingUp className="w-5 h-5 text-green-600" />
          Popular Topics
        </CardTitle>
      </CardHeader>
      <CardContent>
        {total > 0 ? (
          <div className="space-y-4">
            {sortedTopics.map(([topic, count]) => {
              const percentage = ((count / total) * 100).toFixed(1);
              
              return (
                <div key={topic} className="flex items-center justify-between">
                  <Badge 
                    variant="secondary" 
                    className={`${getCategoryColor(topic)} border text-xs`}
                  >
                    {topic.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase())}
                  </Badge>
                  <div className="flex items-center gap-2">
                    <span className="text-sm text-slate-600">{count}</span>
                    <span className="text-xs text-slate-500">({percentage}%)</span>
                  </div>
                </div>
              );
            })}
          </div>
        ) : (
          <p className="text-center text-slate-500 py-8">No categorized conversations yet</p>
        )}
      </CardContent>
    </Card>
  );
}