import React from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { MessageCircle, Bot, User } from "lucide-react";
import { format, parseISO } from "date-fns";
import { Skeleton } from "@/components/ui/skeleton";

export default function RecentActivity({ conversations, isLoading }) {
  if (isLoading) {
    return (
      <Card className="bg-white/80 backdrop-blur-sm border-slate-200/60 shadow-sm">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <MessageCircle className="w-5 h-5 text-blue-600" />
            Recent Activity
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-6">
            {Array(5).fill(0).map((_, index) => (
              <div key={index} className="animate-pulse">
                <div className="flex items-start gap-3">
                  <Skeleton className="w-8 h-8 rounded-full" />
                  <div className="flex-1 space-y-2">
                    <Skeleton className="h-4 w-3/4" />
                    <Skeleton className="h-4 w-full" />
                    <Skeleton className="h-3 w-1/4" />
                  </div>
                </div>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>
    );
  }

  const recentConversations = conversations
    .slice(0, 10)
    .sort((a, b) => new Date(b.created_date) - new Date(a.created_date));

  const getCategoryColor = (category) => {
    const colors = {
      preventive_care: "bg-blue-100 text-blue-800 border-blue-200",
      symptoms: "bg-red-100 text-red-800 border-red-200", 
      vaccination: "bg-green-100 text-green-800 border-green-200",
      maternal_health: "bg-pink-100 text-pink-800 border-pink-200",
      child_health: "bg-yellow-100 text-yellow-800 border-yellow-200",
      nutrition: "bg-orange-100 text-orange-800 border-orange-200",
      mental_health: "bg-purple-100 text-purple-800 border-purple-200",
      emergency: "bg-red-100 text-red-800 border-red-200",
      general: "bg-gray-100 text-gray-800 border-gray-200"
    };
    return colors[category] || colors.general;
  };

  return (
    <Card className="bg-white/80 backdrop-blur-sm border-slate-200/60 shadow-sm">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <MessageCircle className="w-5 h-5 text-blue-600" />
          Recent Activity
        </CardTitle>
      </CardHeader>
      <CardContent>
        {recentConversations.length > 0 ? (
          <div className="space-y-6">
            {recentConversations.map((conversation) => (
              <div key={conversation.id} className="border-b border-slate-100 last:border-b-0 pb-4 last:pb-0">
                {/* Header */}
                <div className="flex justify-between items-start mb-2">
                  <div className="flex gap-2">
                    {conversation.topic_category && (
                      <Badge 
                        variant="secondary" 
                        className={`${getCategoryColor(conversation.topic_category)} border text-xs`}
                      >
                        {conversation.topic_category.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase())}
                      </Badge>
                    )}
                    <Badge variant="outline" className="bg-slate-50 text-slate-600 border-slate-200">
                      {conversation.language}
                    </Badge>
                  </div>
                  <span className="text-xs text-slate-500">
                    {format(parseISO(conversation.created_date), "MMM d, HH:mm")}
                  </span>
                </div>

                {/* User Message */}
                <div className="flex items-start gap-2 mb-2">
                  <div className="w-5 h-5 rounded-full bg-gradient-to-r from-slate-100 to-slate-200 border border-slate-200 flex items-center justify-center flex-shrink-0 mt-0.5">
                    <User className="w-3 h-3 text-slate-600" />
                  </div>
                  <p className="text-sm text-slate-800 font-medium leading-relaxed line-clamp-2">
                    {conversation.user_message}
                  </p>
                </div>

                {/* Bot Response Preview */}
                <div className="flex items-start gap-2">
                  <div className="w-5 h-5 rounded-full bg-gradient-to-r from-blue-100 to-green-100 border border-blue-200 flex items-center justify-center flex-shrink-0 mt-0.5">
                    <Bot className="w-3 h-3 text-blue-600" />
                  </div>
                  <p className="text-sm text-slate-600 leading-relaxed line-clamp-2">
                    {conversation.bot_response.substring(0, 100)}
                    {conversation.bot_response.length > 100 && '...'}
                  </p>
                </div>

                {/* Satisfaction Rating */}
                {conversation.user_satisfaction && (
                  <div className="mt-2 flex items-center gap-2">
                    <span className="text-xs text-slate-500">Rating:</span>
                    <div className="flex gap-1">
                      {Array(5).fill(0).map((_, index) => (
                        <div
                          key={index}
                          className={`w-2 h-2 rounded-full ${
                            index < conversation.user_satisfaction 
                              ? "bg-yellow-400" 
                              : "bg-slate-200"
                          }`}
                        />
                      ))}
                    </div>
                  </div>
                )}
              </div>
            ))}
          </div>
        ) : (
          <p className="text-center text-slate-500 py-8">No recent activity</p>
        )}
      </CardContent>
    </Card>
  );
}